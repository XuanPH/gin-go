# Operating mode(debug,test,release)
RunMode = "debug"

# Static site directory(You can also use -www to specify when starting the service)
WWW = ""
# store type gorm or mongo
store="gorm"
# Whether to enable swagger
Swagger = true

# Whether to print configuration parameters at startup
PrintConfig = true

[HTTP]
# http listen address
Host = "0.0.0.0"
# http port
Port = 8000
# Certification path
CertFile = ""
# Certificate key
KeyFile = ""
# http Graceful shutdown wait timeout duration (in seconds)
ShutdownTimeout = 30
# Maximum content length allowed(64M)
MaxContentLength = 67108864

[Menu]
# Use Enable Initialize Menu Data
Enable = true
# datafile(yaml,Can also be used when starting the service-menu)
Data = ""

[Casbin]
# enable to casbin
Enable = true
# debug mode
Debug = false
# Model configuration file (can also be specified with -m when starting the service)
Model = ""
# Whether to enable periodic automatic loading strategy
AutoLoad = false
# Time interval for automatic strategy loading (in seconds)
AutoLoadInternal = 60
[Log]
# Log level(1:fatal 2:error,3:warn,4:info,5:debug)
Level = 5
# Log format (support output format: text/json)
Format = "text"
#Log output (support: stdout/stderr/file)
Output = "stdout"
# Specify the file path for log output
OutputFile = "data/gin-admin.log"
#
EnableHook = false
# logs store Db level
HookLevels = ["info","warn","error"]
# hook DB (type：gorm/mongo)
Hook = "gorm"
# Process max
HookMaxThread = 1
# The maximum number of buffers written to the hook
HookMaxBuffer = 512

[LogGormHook]
# database type (support DB  ：mysql/sqlite3/postgres)
DBType = "sqlite3"
# max life time (Unit: second)
MaxLifetime = 7200
# Max number connect DB
MaxOpenConns = 1
# Max connect pool
MaxIdleConns = 1
# Table name log
Table = "logger"

[LogMongoHook]
# collection mongodb logs
Collection = "logger"



# Cofig forder static files
ConfigDir = ""



[JWTAuth]
Enable = true
# Signing Key
SigningKey = "gin-admin"
# Expired time (in seconds)
Expired = 7200

[CORS]
# Whether to enable
Enable = false
# List of domain names that allow cross-domain requests (* means all allowed)
AllowOrigins = ["*"]
# List of request methods that allow cross-domain requests
AllowMethods = ["GET","POST","PUT","DELETE","PATCH"]
# A list of non-simple headers that the client is allowed to use with cross-domain requests
AllowHeaders = []
# Whether the request can contain user credentials such as cookies, HTTP authentication or client SSL certificates
AllowCredentials = true
# The time (in seconds) that the result of the preflight request can be cached
MaxAge = 7200


[Gorm]
# Whether to enable debug mode
Debug = true
# Database type (currently supported database type: mysql/sqlite3/postgres)
DBType = "sqlite3"
# Set the maximum time that the connection can be reused (unit: seconds)
MaxLifetime = 7200
# Set the maximum number of open connections to the database
MaxOpenConns = 150
# Set the maximum number of connections in the idle connection pool
MaxIdleConns = 50
EnableAutoMigrate = true

[MySQL]
# host address
Host = "127.0.0.1"
# port
Port= 3306
# user
User = "root"
# password
Password = "123456"
# DB name
DBName = "gin-admin"
# parameters
Parameters = "charset=utf8mb4&parseTime=True&loc=Local&allowNativePasswords=true"

[Postgres]
# host address
Host = "127.0.0.1"
# port
Port= 5432
# user name
User = "root"
# pass
Password = "123456"
# database name
DBName = "gin-admin"
# SSL
SSLMode = "disable"

[Sqlite3]
# path db sqlite
Path = "data/gin-admin.db"

# mongo
# 4.
# After installation, start in replication set mode；
# replication:
# replSetName: rs0
# rs.initiate()
# rs.status()
# StorageEngine (storage engine) must be wiredTiger (support document-level locks), version 4.0 and above has been supported by default
[Mongo]
# url connect (mongodb://user:password@localhost:27017/?authSource=admin)
URI = "mongodb://localhost:27017/?appName=gin-admin"
# database name
Database = "gin-admin"
# Connection timeout (in seconds)
Timeout = 30

[UniqueID]
# Unique ID type (support: uuid/object/snowflake)
Type = "snowflake"

# https://github.com/twitter-archive/snowflake
[UniqueID.Snowflake]
# Node ID (0-1023)
Node = 1
# Start timestamp(2020-07-15 15:04:05)
Epoch = 1594800245000
